<div class="relative inline-block text-left">
    <!-- Botón principal -->
    <div>
      <button
        type="button"
        class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
        id="menu-button"
        aria-expanded="false"
        aria-haspopup="true"
      >
        Lang
        <svg
          class="-mr-1 size-5 text-gray-400"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fill-rule="evenodd"
            d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
            clip-rule="evenodd"
          />
        </svg>
      </button>
    </div>
  
    <!-- Dropdown menu -->
    <div class="absolute right-0 z-10 mt-2 w-28 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none hidden" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" id="dropdown-menu"
    >
      <div class="py-1" role="none">
        <a href="/es" class="px-3 py-2 text-sm text-gray-700 flex items-center gap-1" role="menuitem" tabindex="-1" id="menu-item-0">  
            <img src="/mexico.webp" alt="Español" class="w-4 h-3" /> 
            Español
        </a>
        <a href="/en" class="px-3 py-2 text-sm text-gray-700 flex items-center gap-1" role="menuitem" tabindex="-1" id="menu-item-1">
            <img src="/usa.webp" alt="English" class="w-4 h-3"/> 
            English
        </a>
      </div>
    </div>
  </div>





<script>
    // Obtener elementos del DOM
    const menuButton = document.getElementById("menu-button");
    console.log(menuButton)
     const dropdownMenu = document.getElementById("dropdown-menu");
   
     // Función para alternar la visibilidad del menú
     function toggleDropdown() {
       const isExpanded = menuButton?.getAttribute("aria-expanded") === "true";
       menuButton?.setAttribute("aria-expanded", (!isExpanded).toString());
       dropdownMenu?.classList.toggle("hidden", isExpanded);
     }
   
     // Función para cerrar el menú al hacer clic fuera
     function closeDropdown(event: MouseEvent ) {
       const target = event.target as Node; // Aseguramos que sea de tipo Node
       if (
         !menuButton?.contains(target) &&
         !dropdownMenu?.contains(target)
       ) {
         menuButton?.setAttribute("aria-expanded", "false");
         dropdownMenu?.classList.add("hidden");
       }
     }
   
     // Evento para abrir/cerrar el menú al hacer clic en el botón
     menuButton?.addEventListener("click", toggleDropdown);
   
     // Evento para cerrar el menú al hacer clic fuera
     document.addEventListener("click", closeDropdown);
   
     // Opcional: Cerrar el menú al presionar la tecla Esc
     document.addEventListener("keydown", (event) => {
       if (event.key === "Escape") {
         menuButton?.setAttribute("aria-expanded", "false");
         dropdownMenu?.classList.add("hidden");
       }
     });
   </script>